expression -> equality ;
assignment -> IDENTIFIER "=" assignment
            | logical_or ;
logical_or -> logical_and ( "or" logical_and )* ;
logical_and -> equality ( "and" equality )* ;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term -> factor ( ( "-" | "+" ) factor )* ;
factor -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary 
       | primary ;
primary -> "true" | "false" | NUMBER | STRING | "(" expression ")" | IDENTIFIER ;

program -> declaration* EOF ;

declaration -> varDecl
            | statment ;


statement -> exprStmt 
            | echoStmt
            | ifStmt
            | whileStmt
            | block ;

block -> "{" declaration* "}" ;

varDecl -> ("set" | IDENTIFIER) ( "mut" )? IDENTIFIER ( "=" expression )? ";" ;

ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ;

whileStmt -> "while" "(" expression ")" statement ;

forStmt -> "for" "(" ( IDENTIFIER "in" )? (range | IDENTIFIER) ")" statement ;
range -> NUMBER ".." NUMBER ;

exprStmt -> expression ";" ;

echoStmt -> "echo" expression ";";